<?xml version="1.0" encoding="UTF-8"?>
 
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
 
<!-- dev.mvc.cate.CateDAOInter 패키지에 등록된 interface 명시,
      패키지명과 인터페이스명은 실제로 존재해야함,
      Spring이 내부적으로 자동으로 interface를 구현해줌. -->
<mapper namespace="dev.mvc.cate.CateDAOInter">
  <!-- 
  insert: INSERT SQL 실행
  id: Spring에서 호출시 사용
  parameterType: 전달받는 데이터 객체의 타입
  return: 등록한 레코드 갯수 리턴
  SQL선언시 ';'은 삭제
  #{}: ? 동일
  #{name}: public String getName() 자동 호출
   --> 
  <insert id="create" parameterType="CateVO">
    INSERT INTO cate(cateno, categrpno, name, seqno, visible, rdate, cnt)
    VALUES(cate_seq.nextval, #{categrpno}, #{name}, #{seqno}, #{visible}, sysdate, 0)
  </insert> 
  
  <!-- 
  레코드 갯수 만큼 CateVO 객체를 만들어 ArrayList에 저장하여 리턴,
  List<CateVO> list = new ArrayList<CateVO>(); 
  -->
  <select id="list_cateno_asc" resultType="CateVO">
    SELECT cateno, categrpno, name, seqno, visible, rdate, cnt
    FROM cate
    ORDER BY cateno ASC
  </select>
  
  <select id="list_seqno_asc" resultType="CateVO">
    SELECT cateno, categrpno, name, seqno, visible, rdate, cnt
    FROM cate
    ORDER BY seqno ASC
  </select>

  <select id="list_by_categrpno" resultType="CateVO" parameterType="int">
    SELECT cateno, categrpno, name, seqno, visible, rdate, cnt
    FROM cate
    WHERE categrpno=#{categrpno}
    ORDER BY seqno ASC
  </select>
  
  <!-- 조회, id: read, 입력: cateno, 리턴: CateVO -->
  <select id="read" resultType="CateVO" parameterType="int">
    SELECT cateno, categrpno, name, seqno, visible, rdate, cnt
    FROM cate
    WHERE cateno=#{cateno}
  </select>  
  
  <update id="update" parameterType="CateVO">
    UPDATE cate
    SET categrpno=#{categrpno}, name=#{name}, seqno=#{seqno}, visible=#{visible}, cnt=#{cnt}
    WHERE cateno = #{cateno}
  </update>

  <!-- 삭제, return: int -->
  <delete id="delete" parameterType="int">
    DELETE cate
    WHERE cateno = #{cateno}
  </delete>   

  <!-- 우선순위 상향 up 10 ▷ 1 -->
  <update id="update_seqno_up" parameterType="int">
    UPDATE cate
    SET seqno = seqno - 1
    WHERE cateno=#{cateno}
  </update>
  
  <!-- 우선순위 하향 down 1 ▷ 10 -->
  <update id="update_seqno_down" parameterType="int">
    UPDATE cate
    SET seqno = seqno + 1
    WHERE cateno=#{cateno}
  </update>

  <!-- 수정, id: update_visible, 입력: CategrpVO, 리턴: int -->
  <update id="update_visible" parameterType="CateVO">
    UPDATE cate
    SET visible=#{visible}
    WHERE cateno=#{cateno}
  </update>
  
  <!-- categrp + cate inner join,  1 : 다, 통합 VO -->
  <select id="list_join" resultType="Categrp_Cate_join">
    SELECT r.categrpno as r_categrpno, r.name as r_name,
               c.cateno, c.categrpno, c.name, c.seqno, c.visible, c.rdate, c.cnt
    FROM categrp r, cate c
    WHERE r.categrpno = c.categrpno
    ORDER BY r.categrpno ASC, c.seqno ASC
  </select>
 
  <!-- categrpno 별 cate 목록: categrp + cate inner join,  1 : 다, 통합 VO -->
  <select id="list_join_by_categrpno" resultType="Categrp_Cate_join" parameterType="int">
    SELECT r.categrpno as r_categrpno, r.name as r_name,
               c.cateno, c.categrpno, c.name, c.seqno, c.visible, c.rdate, c.cnt
    FROM categrp r, cate c
    WHERE (r.categrpno = c.categrpno) AND r.categrpno=#{categrpno}
    ORDER BY r.categrpno ASC, c.seqno ASC
  </select>
  
  <update id="increaseCnt" parameterType="int">
    UPDATE cate 
    SET cnt = cnt + 1 
    WHERE cateno=#{cateno}
  </update>

  <update id="decreaseCnt" parameterType="int">
    UPDATE cate 
    SET cnt = cnt - 1 
    WHERE cateno=#{cateno}
  </update>
  
</mapper>




